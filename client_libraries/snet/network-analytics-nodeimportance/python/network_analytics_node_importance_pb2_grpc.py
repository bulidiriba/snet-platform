# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import network_analytics_node_importance_pb2 as network__analytics__node__importance__pb2


class NetworkAnalyticsNodeImportanceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CentralNodes = channel.unary_unary(
        '/NetworkAnalyticsNodeImportance/CentralNodes',
        request_serializer=network__analytics__node__importance__pb2.CentralNodeRequest.SerializeToString,
        response_deserializer=network__analytics__node__importance__pb2.CentralNodeResponse.FromString,
        )
    self.Periphery = channel.unary_unary(
        '/NetworkAnalyticsNodeImportance/Periphery',
        request_serializer=network__analytics__node__importance__pb2.PeripheryRequest.SerializeToString,
        response_deserializer=network__analytics__node__importance__pb2.PeripheryResponse.FromString,
        )
    self.DegreeCentrality = channel.unary_unary(
        '/NetworkAnalyticsNodeImportance/DegreeCentrality',
        request_serializer=network__analytics__node__importance__pb2.DegreeCentralityRequest.SerializeToString,
        response_deserializer=network__analytics__node__importance__pb2.DegreeCentralityResponse.FromString,
        )
    self.BetweennessCentrality = channel.unary_unary(
        '/NetworkAnalyticsNodeImportance/BetweennessCentrality',
        request_serializer=network__analytics__node__importance__pb2.BetweennessCentralityRequest.SerializeToString,
        response_deserializer=network__analytics__node__importance__pb2.BetweennessCentralityResponse.FromString,
        )
    self.PageRank = channel.unary_unary(
        '/NetworkAnalyticsNodeImportance/PageRank',
        request_serializer=network__analytics__node__importance__pb2.PageRankRequest.SerializeToString,
        response_deserializer=network__analytics__node__importance__pb2.PageRankResponse.FromString,
        )
    self.EigenvectorCentrality = channel.unary_unary(
        '/NetworkAnalyticsNodeImportance/EigenvectorCentrality',
        request_serializer=network__analytics__node__importance__pb2.EigenvectorCentralityRequest.SerializeToString,
        response_deserializer=network__analytics__node__importance__pb2.EigenvectorCentralityResponse.FromString,
        )
    self.Hits = channel.unary_unary(
        '/NetworkAnalyticsNodeImportance/Hits',
        request_serializer=network__analytics__node__importance__pb2.HitsRequest.SerializeToString,
        response_deserializer=network__analytics__node__importance__pb2.HitsResponse.FromString,
        )
    self.ClosenessCentrality = channel.unary_unary(
        '/NetworkAnalyticsNodeImportance/ClosenessCentrality',
        request_serializer=network__analytics__node__importance__pb2.ClosenessCentralityRequest.SerializeToString,
        response_deserializer=network__analytics__node__importance__pb2.ClosenessCentralityResponse.FromString,
        )


class NetworkAnalyticsNodeImportanceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CentralNodes(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Periphery(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DegreeCentrality(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BetweennessCentrality(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PageRank(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EigenvectorCentrality(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Hits(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ClosenessCentrality(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NetworkAnalyticsNodeImportanceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CentralNodes': grpc.unary_unary_rpc_method_handler(
          servicer.CentralNodes,
          request_deserializer=network__analytics__node__importance__pb2.CentralNodeRequest.FromString,
          response_serializer=network__analytics__node__importance__pb2.CentralNodeResponse.SerializeToString,
      ),
      'Periphery': grpc.unary_unary_rpc_method_handler(
          servicer.Periphery,
          request_deserializer=network__analytics__node__importance__pb2.PeripheryRequest.FromString,
          response_serializer=network__analytics__node__importance__pb2.PeripheryResponse.SerializeToString,
      ),
      'DegreeCentrality': grpc.unary_unary_rpc_method_handler(
          servicer.DegreeCentrality,
          request_deserializer=network__analytics__node__importance__pb2.DegreeCentralityRequest.FromString,
          response_serializer=network__analytics__node__importance__pb2.DegreeCentralityResponse.SerializeToString,
      ),
      'BetweennessCentrality': grpc.unary_unary_rpc_method_handler(
          servicer.BetweennessCentrality,
          request_deserializer=network__analytics__node__importance__pb2.BetweennessCentralityRequest.FromString,
          response_serializer=network__analytics__node__importance__pb2.BetweennessCentralityResponse.SerializeToString,
      ),
      'PageRank': grpc.unary_unary_rpc_method_handler(
          servicer.PageRank,
          request_deserializer=network__analytics__node__importance__pb2.PageRankRequest.FromString,
          response_serializer=network__analytics__node__importance__pb2.PageRankResponse.SerializeToString,
      ),
      'EigenvectorCentrality': grpc.unary_unary_rpc_method_handler(
          servicer.EigenvectorCentrality,
          request_deserializer=network__analytics__node__importance__pb2.EigenvectorCentralityRequest.FromString,
          response_serializer=network__analytics__node__importance__pb2.EigenvectorCentralityResponse.SerializeToString,
      ),
      'Hits': grpc.unary_unary_rpc_method_handler(
          servicer.Hits,
          request_deserializer=network__analytics__node__importance__pb2.HitsRequest.FromString,
          response_serializer=network__analytics__node__importance__pb2.HitsResponse.SerializeToString,
      ),
      'ClosenessCentrality': grpc.unary_unary_rpc_method_handler(
          servicer.ClosenessCentrality,
          request_deserializer=network__analytics__node__importance__pb2.ClosenessCentralityRequest.FromString,
          response_serializer=network__analytics__node__importance__pb2.ClosenessCentralityResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'NetworkAnalyticsNodeImportance', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
